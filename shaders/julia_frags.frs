#version 330 core

out vec4 FragColor;

uniform float posx;
uniform float posy;
uniform float centre_x;
uniform float centre_y;
uniform float zoom;
uniform float screen_width;
uniform float screen_height;

uniform vec3 colour_1;
uniform vec3 colour_2;
uniform vec3 colour_3;
uniform vec3 colour_4;
uniform vec3 colour_5;

uniform int max_iter;

// Function to determine the height based on x and y coordinates
float julia_iterate(float x, float y) {
    int iter;
    float threshold = 2.0;
    float cr = centre_x;
    float ci = centre_y;

    vec2 iv = vec2(x, y);
    for (iter = 0; iter < max_iter; ++iter) {
        iv = vec2(iv.x * iv.x - iv.y * iv.y + cr, 2.0 * iv.x * iv.y + ci);
        if (length(iv) > threshold) break;
    }
    return float(iter);
}

vec2 transform_view_space(vec2 position){
    // Convert position to normalized device coordinates (NDC)
    vec2 ndc = (position - vec2(screen_width / 2.0, screen_height / 2.0)) / vec2(screen_width / 2.0, screen_height / 2.0);
    // Apply zoom factor, keeping the zoom centered around the center of the screen
    ndc = ndc * zoom;
    // Adjust back to screen coordinates centered around the zoomed center
    ndc = ndc * vec2(screen_width / 2.0, screen_height / 2.0) + vec2(screen_width / 2.0, screen_height / 2.0);
    // Translate back to the original view position
    return (ndc - vec2(posx, posy)) / vec2(screen_width, screen_height) * 2.0 - 1.0;
}

vec3 colour_map(float t){
    vec3 colour1, colour2;
    float new_t;
    if (t < 0.25){
        colour1 = colour_1;
        colour2 = colour_2;
        new_t = t * 4;

    } else if (t < 0.5){
        colour1 = colour_2;
        colour2 = colour_3;
        new_t = (t - 0.25) * 4;

    } else if (t < 0.75){
        colour1 = colour_3;
        colour2 = colour_4;
        new_t = (t - 0.5) * 4;

    } else if (t <= 1){
        colour1 = colour_4;
        colour2 = colour_5;
        new_t = (t - 0.75) * 4;

    }

    return colour1 * (1 - new_t) + colour2 * new_t;
}

void main() {
    // Convert gl_FragCoord from screen space to normalized device coordinates (NDC)
    vec2 ndc = transform_view_space(gl_FragCoord.xy); // Assuming screen size of 800x600

    float size = julia_iterate(ndc.x, ndc.y);

    vec3 color = colour_map(size/max_iter);
    
    FragColor = vec4(color, 1.0);
}
