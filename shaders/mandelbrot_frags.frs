#version 330 core

out vec4 FragColor;

uniform float posx;
uniform float posy;
uniform float centre_x;
uniform float centre_y;
uniform float zoom;
uniform float screen_width;
uniform float screen_height;

uniform vec3 colour_1;
uniform vec3 colour_2;
uniform vec3 colour_3;

uniform int max_iter;

// Function to determine the height based on x and y coordinates
float mandelbrot_iterate(float x, float y) {
    int iter;
    float threshold = 2.0;

    vec2 c = vec2(x, y); // c is the complex constant
    vec2 z = vec2(centre_x, centre_y); // Start with z = 0

    for (iter = 0; iter < max_iter; ++iter) {
        z = vec2(z.x * z.x - z.y * z.y + c.x, 2.0 * z.x * z.y + c.y); // z^2 + c
        if (length(z) > threshold) break; // Check if |z| > 2
    }

    return float(iter);
}

vec2 transform_view_space(vec2 position){
    // Convert position to normalized device coordinates (NDC)
    vec2 ndc = (position - vec2(screen_width / 2.0, screen_height / 2.0)) / vec2(screen_width / 2.0, screen_height / 2.0);
    // Apply zoom factor, keeping the zoom centered around the center of the screen
    ndc = ndc * zoom;
    // Adjust back to screen coordinates centered around the zoomed center
    ndc = ndc * vec2(screen_width / 2.0, screen_height / 2.0) + vec2(screen_width / 2.0, screen_height / 2.0);
    // Translate back to the original view position
    return (ndc - vec2(posx, posy)) / vec2(screen_width, screen_height) * 2.0 - 1.0;
}

vec3 colour_map(float t){
    vec3 colour1, colour2;
    float new_t;
    if (t < 0.5){
        colour1 = colour_1;
        colour2 = colour_2;
        new_t = t * 2;
    }
    else {
        colour1 = colour_2;
        colour2 = colour_3;
        new_t = (t - 0.5)*2;
    }
    return colour1 * (1 - new_t) + colour2 * new_t;
}

void main() {
    // Convert gl_FragCoord from screen space to normalized device coordinates (NDC)
    vec2 ndc = transform_view_space(gl_FragCoord.xy); // Assuming screen size of 800x600

    float size = mandelbrot_iterate(ndc.x, ndc.y);

    vec3 color = colour_map(size/max_iter);
    
    FragColor = vec4(color, 1.0);
}
